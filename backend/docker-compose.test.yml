version: "3"
services:
  # NOTE: We don't have to run the gateway container since we create an instance
  # during our NestJS tests.

  # gateway:
  #   build: 
  #     context: .
  #     dockerfile: ./apps/gateway/Dockerfile
  #   depends_on:
  #     sql-migrations:
  #       condition: service_completed_successfully
  #     rabbitmq:
  #       condition: service_healthy
  #   ports:
  #     - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
  #   networks:
  #     - backend
  #   env_file:
  #     .env.test
  #   environment:
  #     - RMQ_URL=amqp://guest:guest@rabbitmq:5672

  question:
    build: 
      context: .
      dockerfile: ./apps/question/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    env_file:
      .env.test
    environment:
      - RMQ_URL=amqp://guest:guest@rabbitmq:5672

  matching:
    build: 
      context: .
      dockerfile: ./apps/matching/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    ports:
      - ${MATCHING_SERVICE_PORT}:${MATCHING_SERVICE_PORT}
    env_file:
      .env.test

  collaboration:
    build: 
      context: .
      dockerfile: ./apps/collaboration/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    env_file:
      .env.test
    environment:
      - RMQ_URL=amqp://guest:guest@rabbitmq:5672

  postgres:
    image: postgres:14.1-alpine
    restart: always
    networks:
      - backend
    env_file:
      .env.test
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  sql-migrations:
    build: 
      context: .
      dockerfile: ./scripts/Dockerfile
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      .env.test

  rabbitmq:
    image: rabbitmq:management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    networks:
      - backend
    ports:
      - 5673:5672 # To not conflict with local RMQ if test is ran locally
      - 15672:15672

networks:
  backend:
    driver: bridge
