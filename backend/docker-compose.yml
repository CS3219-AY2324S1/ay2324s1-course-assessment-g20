version: "3"
services:
  gateway:
    build: 
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - backend
    env_file:
      .env
    environment:
      - QUESTION_SERVICE_HOST=question
      - USER_SERVICE_HOST=user
      - COLLABORATION_SERVICE_HOST=collaboration

  question:
    build: 
      context: .
      dockerfile: ./apps/question/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    env_file:
      .env
    environment:
      - QUESTION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-question

  user:
    build: 
      context: .
      dockerfile: ./apps/user/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    env_file:
      .env
    environment:
      - USER_SERVICE_SQL_DATABASE_HOST=postgres
      - USER_SERVICE_SQL_DATABASE_PORT=5432
      - USER_SERVICE_SQL_DATABASE_USER=postgres
      - USER_SERVICE_SQL_DATABASE_PASSWORD=postgres

  collaboration:
    build: 
      context: .
      dockerfile: ./apps/collaboration/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    env_file:
      .env
    environment:
      - QUESTION_SERVICE_HOST=question
      - USER_SERVICE_HOST=user
      - COLLABORATION_SERVICE_SQL_DATABASE_HOST=postgres
      - COLLABORATION_SERVICE_SQL_DATABASE_PORT=5432
      - COLLABORATION_SERVICE_SQL_DATABASE_USER=postgres
      - COLLABORATION_SERVICE_SQL_DATABASE_PASSWORD=postgres

  postgres:
    image: postgres:14.1-alpine
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data # Persist data between restarts
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 20s
      retries: 5
      start_period: 20s

  sql-migrations:
    build: 
      context: .
      dockerfile: ./scripts/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    env_file:
      .env
    networks:
      - backend
    environment:
      - USER_SERVICE_SQL_DATABASE_HOST=postgres
      - USER_SERVICE_SQL_DATABASE_PORT=5432
      - USER_SERVICE_SQL_DATABASE_USER=postgres
      - USER_SERVICE_SQL_DATABASE_PASSWORD=postgres

      - COLLABORATION_SERVICE_SQL_DATABASE_HOST=postgres
      - COLLABORATION_SERVICE_SQL_DATABASE_PORT=5432
      - COLLABORATION_SERVICE_SQL_DATABASE_USER=postgres
      - COLLABORATION_SERVICE_SQL_DATABASE_PASSWORD=postgres

      - QUESTION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-question?authMechanism=DEFAULT
      - COLLABORATION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-collaboration?authMechanism=DEFAULT

  rabbitmq:
    image: rabbitmq:management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5

networks:
  backend:
    driver: bridge
