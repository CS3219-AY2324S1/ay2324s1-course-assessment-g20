version: "3"
services:
  # NOTE: We don't have to run the gateway container since we create an instance
  # during our NestJS tests.

  # gateway:
  #   build: 
  #     context: .
  #     dockerfile: ./apps/gateway/Dockerfile
  #   depends_on:
  #     sql-migrations:
  #       condition: service_completed_successfully
  #     rabbitmq:
  #       condition: service_healthy
  #   ports:
  #     - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
  #   networks:
  #     - backend
  #   env_file:
  #     .env.test
  #   environment:
  #     - RMQ_URL=amqp://guest:guest@rabbitmq:5672

  question:
    build: 
      context: .
      dockerfile: ./apps/question/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    ports:
      - ${QUESTION_SERVICE_PORT}:${QUESTION_SERVICE_PORT}
    env_file:
      .env.test
    environment:
      - QUESTION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-question

  user:
    build: 
      context: .
      dockerfile: ./apps/user/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}
    env_file:
      .env.test

  matching:
    build: 
      context: .
      dockerfile: ./apps/matching/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    env_file:
      .env.test
    environment:
      - RMQ_URL=amqp://guest:guest@rabbitmq:5672

  collaboration:
    build: 
      context: .
      dockerfile: ./apps/collaboration/Dockerfile
    depends_on:
      sql-migrations:
        condition: service_completed_successfully
    networks:
      - backend
    ports:
      - ${COLLABORATION_SERVICE_PORT}:${COLLABORATION_SERVICE_PORT}
    env_file:
      .env.test

  postgres:
    image: postgres:14.1-alpine
    restart: always
    networks:
      - backend
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 20s
      retries: 5
      start_period: 20s

  sql-migrations:
    build: 
      context: .
      dockerfile: ./scripts/Dockerfile
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    env_file:
      .env.test
    environment:
      - QUESTION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-question?authMechanism=DEFAULT
      - COLLABORATION_SERVICE_MONGODB_URL=mongodb://root:root@mongo:27017/peer-prep-collaboration?authMechanism=DEFAULT

  redis:
    image: redis:7.2.1-alpine
    ports:
      - '6379:6379'
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 5s
      timeout: 20s
      retries: 5
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    ports:
      - 2181:2181
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 4444"]
      interval: 5s
      timeout: 10s
      retries: 3
  
  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    networks:
      - backend
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  backend:
    driver: bridge
